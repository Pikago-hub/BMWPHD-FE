{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextField/VTextField.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\ntype EventProp<T = (...args: any[]) => any> = T | T[]\nconst EventProp = [Function, Array] as PropType<EventProp>\n\nexport const VTextField = genericComponent<new () => {\n  $props: SlotsToProps<Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n    default: []\n  }>>\n}>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'click:input': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      model.value = (e.target as HTMLInputElement).value\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ (e: MouseEvent) => {\n                  if (e.target === inputRef.value) return\n\n                  e.preventDefault()\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            onClick={ e => emit('click:input', e) }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass }) }\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"],
  "mappings": "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",
  "names": ["activeTypes", "VTextField", "genericComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "autofocus", "Boolean", "counter", "Number", "String", "counterValue", "Function", "hint", "persistentHint", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "suffix", "type", "default", "makeVInputProps", "makeVFieldProps", "emits", "e", "focused", "val", "setup", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "inputRef", "isActive", "activeTypes", "includes", "messages", "onFocus", "document", "activeElement", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "filterInputProps", "fieldProps", "filterFieldProps", "variant", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "preventDefault", "dirty", "class", "fieldClass", "slotProps", "inputNode", "handler", "cloneVNode", "forwardRefs"]
}
