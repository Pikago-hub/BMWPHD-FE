import {
  VOverlay,
  filterVOverlayProps,
  makeVOverlayProps,
  useScopeId
} from "./chunk-XEWTJHQL.js";
import {
  forwardRefs
} from "./chunk-ABXCYA5O.js";
import "./chunk-RGDEJ5CL.js";
import "./chunk-NTWP6RK7.js";
import "./chunk-SOC6SLTU.js";
import "./chunk-LYD2G5N3.js";
import "./chunk-CQZCI2VT.js";
import {
  useProxiedModel
} from "./chunk-JMPDX6OO.js";
import "./chunk-JN7RSF53.js";
import {
  genericComponent,
  getUid,
  omit,
  useRender
} from "./chunk-KLSUJFNT.js";
import {
  computed,
  createVNode,
  mergeProps,
  ref
} from "./chunk-IC65DETL.js";
import "./chunk-TWLJ45QX.js";

// node_modules/vuetify/lib/components/VTooltip/VTooltip.mjs
import "S:/Senior Design/Project 1/BMWPHD-FE/node_modules/vuetify/lib/components/VTooltip/VTooltip.css";
var VTooltip = genericComponent()({
  name: "VTooltip",
  props: {
    id: String,
    text: String,
    ...omit(makeVOverlayProps({
      closeOnBack: false,
      location: "end",
      locationStrategy: "connected",
      minWidth: 0,
      offset: 10,
      openOnClick: false,
      openOnHover: true,
      origin: "auto",
      scrim: false,
      scrollStrategy: "reposition",
      transition: false
    }), ["absolute", "persistent", "eager"])
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      scopeId
    } = useScopeId();
    const uid = getUid();
    const id = computed(() => props.id || `v-tooltip-${uid}`);
    const overlay = ref();
    const location = computed(() => {
      return props.location.split(" ").length > 1 ? props.location : props.location + " center";
    });
    const origin = computed(() => {
      return props.origin === "auto" || props.origin === "overlap" || props.origin.split(" ").length > 1 || props.location.split(" ").length > 1 ? props.origin : props.origin + " center";
    });
    const transition = computed(() => {
      if (props.transition)
        return props.transition;
      return isActive.value ? "scale-transition" : "fade-transition";
    });
    useRender(() => {
      const [overlayProps] = filterVOverlayProps(props);
      return createVNode(VOverlay, mergeProps({
        "ref": overlay,
        "class": ["v-tooltip"],
        "id": id.value
      }, overlayProps, {
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "transition": transition.value,
        "absolute": true,
        "location": location.value,
        "origin": origin.value,
        "persistent": true,
        "role": "tooltip",
        "eager": true,
        "activatorProps": mergeProps({
          "aria-describedby": id.value
        }, props.activatorProps)
      }, scopeId), {
        activator: slots.activator,
        default: function() {
          var _a;
          var _slots$default;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_a = (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, ...args)) != null ? _a : props.text;
        }
      });
    });
    return forwardRefs({}, overlay);
  }
});
export {
  VTooltip
};
//# sourceMappingURL=vuetify_lib_components_VTooltip_index__mjs.js.map
